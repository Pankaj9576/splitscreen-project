{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\panka\\\\Downloads\\\\splitscreen-main\\\\splitscreen-main\\\\src\\\\components\\\\SplitScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SplitScreenContainer = styled.div`\n  display: flex;\n  flex: 1;\n  height: 100%;\n  overflow: hidden;\n  flex-grow: 1;\n  position: relative;\n`;\n_c = SplitScreenContainer;\nconst Panel = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  border: 1px solid #e0e0e0;\n  background: #f9f9f9;\n  transition: width 0.3s ease;\n\n  &:first-child {\n    border-right: none;\n  }\n\n  &:last-child {\n    border-left: none;\n  }\n`;\n_c2 = Panel;\nconst ResizeHandle = styled.div`\n  width: 3px;\n  background: #e0e0e0;\n  cursor: col-resize;\n  position: absolute;\n  left: 50%;\n  top: 0;\n  bottom: 0;\n  transform: translateX(-50%);\n  z-index: 2;\n  transition: background 0.2s ease;\n\n  &:hover {\n    background: #4a90e2;\n  }\n\n  &:active {\n    background: #357abd;\n  }\n`;\n_c3 = ResizeHandle;\nconst SplitScreen = ({\n  children,\n  screenMode\n}) => {\n  _s();\n  const [leftWidth, setLeftWidth] = useState(50);\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef(null);\n  const handleRef = useRef(null);\n  const [left, right] = children;\n  useEffect(() => {\n    const handleMouseMove = e => {\n      if (!isResizing || !containerRef.current) return;\n      const containerRect = containerRef.current.getBoundingClientRect();\n      let newWidth = (e.clientX - containerRect.left) / containerRect.width * 100;\n      newWidth = Math.max(10, Math.min(90, newWidth));\n      setLeftWidth(newWidth);\n    };\n    const handleMouseUp = () => {\n      setIsResizing(false);\n    };\n    if (isResizing) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isResizing]);\n\n  // Determine panel visibility and width based on screenMode\n  const leftStyle = {\n    width: screenMode === 'left' ? '100%' : screenMode === 'right' ? '0%' : `${leftWidth}%`,\n    display: screenMode === 'right' ? 'none' : 'block'\n  };\n  const rightStyle = {\n    width: screenMode === 'right' ? '100%' : screenMode === 'left' ? '0%' : `${100 - leftWidth}%`,\n    display: screenMode === 'left' ? 'none' : 'block'\n  };\n  const handleVisibility = screenMode === 'both' ? 'visible' : 'hidden';\n  return /*#__PURE__*/_jsxDEV(SplitScreenContainer, {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(Panel, {\n      style: leftStyle,\n      children: left\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResizeHandle, {\n      ref: handleRef,\n      onMouseDown: () => setIsResizing(true),\n      style: {\n        visibility: handleVisibility\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Panel, {\n      style: rightStyle,\n      children: right\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(SplitScreen, \"y7+btrN94DoppZ3lbD1r/dBaQLQ=\");\n_c4 = SplitScreen;\nexport default SplitScreen;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SplitScreenContainer\");\n$RefreshReg$(_c2, \"Panel\");\n$RefreshReg$(_c3, \"ResizeHandle\");\n$RefreshReg$(_c4, \"SplitScreen\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","jsxDEV","_jsxDEV","SplitScreenContainer","div","_c","Panel","_c2","ResizeHandle","_c3","SplitScreen","children","screenMode","_s","leftWidth","setLeftWidth","isResizing","setIsResizing","containerRef","handleRef","left","right","handleMouseMove","e","current","containerRect","getBoundingClientRect","newWidth","clientX","width","Math","max","min","handleMouseUp","window","addEventListener","removeEventListener","leftStyle","display","rightStyle","handleVisibility","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","visibility","_c4","$RefreshReg$"],"sources":["C:/Users/panka/Downloads/splitscreen-main/splitscreen-main/src/components/SplitScreen.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst SplitScreenContainer = styled.div`\n  display: flex;\n  flex: 1;\n  height: 100%;\n  overflow: hidden;\n  flex-grow: 1;\n  position: relative;\n`;\n\nconst Panel = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  border: 1px solid #e0e0e0;\n  background: #f9f9f9;\n  transition: width 0.3s ease;\n\n  &:first-child {\n    border-right: none;\n  }\n\n  &:last-child {\n    border-left: none;\n  }\n`;\n\nconst ResizeHandle = styled.div`\n  width: 3px;\n  background: #e0e0e0;\n  cursor: col-resize;\n  position: absolute;\n  left: 50%;\n  top: 0;\n  bottom: 0;\n  transform: translateX(-50%);\n  z-index: 2;\n  transition: background 0.2s ease;\n\n  &:hover {\n    background: #4a90e2;\n  }\n\n  &:active {\n    background: #357abd;\n  }\n`;\n\nconst SplitScreen = ({ children, screenMode }) => {\n  const [leftWidth, setLeftWidth] = useState(50);\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef(null);\n  const handleRef = useRef(null);\n\n  const [left, right] = children;\n\n  useEffect(() => {\n    const handleMouseMove = (e) => {\n      if (!isResizing || !containerRef.current) return;\n      const containerRect = containerRef.current.getBoundingClientRect();\n      let newWidth = ((e.clientX - containerRect.left) / containerRect.width) * 100;\n      newWidth = Math.max(10, Math.min(90, newWidth));\n      setLeftWidth(newWidth);\n    };\n\n    const handleMouseUp = () => {\n      setIsResizing(false);\n    };\n\n    if (isResizing) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isResizing]);\n\n  // Determine panel visibility and width based on screenMode\n  const leftStyle = {\n    width: screenMode === 'left' ? '100%' : screenMode === 'right' ? '0%' : `${leftWidth}%`,\n    display: screenMode === 'right' ? 'none' : 'block',\n  };\n\n  const rightStyle = {\n    width: screenMode === 'right' ? '100%' : screenMode === 'left' ? '0%' : `${100 - leftWidth}%`,\n    display: screenMode === 'left' ? 'none' : 'block',\n  };\n\n  const handleVisibility = screenMode === 'both' ? 'visible' : 'hidden';\n\n  return (\n    <SplitScreenContainer ref={containerRef}>\n      <Panel style={leftStyle}>{left}</Panel>\n      <ResizeHandle\n        ref={handleRef}\n        onMouseDown={() => setIsResizing(true)}\n        style={{ visibility: handleVisibility }}\n      />\n      <Panel style={rightStyle}>{right}</Panel>\n    </SplitScreenContainer>\n  );\n};\n\nexport default SplitScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}