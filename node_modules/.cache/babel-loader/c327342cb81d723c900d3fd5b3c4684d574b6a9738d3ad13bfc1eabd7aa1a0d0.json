{"ast":null,"code":"import axios from 'axios';\nclass BigQueryPatentFetcher {\n  async fetchPatentData(patentNumber) {\n    try {\n      console.log(`Fetching patent data for ${patentNumber} from http://localhost:3001/api/fetch-patent`);\n      const response = await axios.post('http://localhost:3001/api/fetch-patent', {\n        patentNumber\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.data || Object.keys(response.data).length === 0) {\n        throw new Error('No patent data returned');\n      }\n      console.log('Patent data fetched successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error fetching patent data:', {\n        message: error.message,\n        response: error.response ? error.response.data : 'No response'\n      });\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch patent data');\n    }\n  }\n}\nexport default BigQueryPatentFetcher;","map":{"version":3,"names":["axios","BigQueryPatentFetcher","fetchPatentData","patentNumber","console","log","response","post","headers","data","Object","keys","length","Error","error","_error$response","_error$response$data","message"],"sources":["C:/Users/panka/Downloads/splitscreen-main/splitscreen-main/src/components/BigQueryPatentFetcher.js"],"sourcesContent":["import axios from 'axios';\n\nclass BigQueryPatentFetcher {\n  async fetchPatentData(patentNumber) {\n    try {\n      console.log(`Fetching patent data for ${patentNumber} from http://localhost:3001/api/fetch-patent`);\n      const response = await axios.post('http://localhost:3001/api/fetch-patent', { patentNumber }, {\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.data || Object.keys(response.data).length === 0) {\n        throw new Error('No patent data returned');\n      }\n      console.log('Patent data fetched successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching patent data:', {\n        message: error.message,\n        response: error.response ? error.response.data : 'No response',\n      });\n      throw new Error(error.response?.data?.message || 'Failed to fetch patent data');\n    }\n  }\n}\n\nexport default BigQueryPatentFetcher;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,qBAAqB,CAAC;EAC1B,MAAMC,eAAeA,CAACC,YAAY,EAAE;IAClC,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,4BAA4BF,YAAY,8CAA8C,CAAC;MACnG,MAAMG,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,wCAAwC,EAAE;QAAEJ;MAAa,CAAC,EAAE;QAC5FK,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MACF,IAAI,CAACF,QAAQ,CAACG,IAAI,IAAIC,MAAM,CAACC,IAAI,CAACL,QAAQ,CAACG,IAAI,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;QAC7D,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACAT,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEC,QAAQ,CAACG,IAAI,CAAC;MAC/D,OAAOH,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdZ,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAE;QAC3CG,OAAO,EAAEH,KAAK,CAACG,OAAO;QACtBX,QAAQ,EAAEQ,KAAK,CAACR,QAAQ,GAAGQ,KAAK,CAACR,QAAQ,CAACG,IAAI,GAAG;MACnD,CAAC,CAAC;MACF,MAAM,IAAII,KAAK,CAAC,EAAAE,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBN,IAAI,cAAAO,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI,6BAA6B,CAAC;IACjF;EACF;AACF;AAEA,eAAehB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}